apiVersion: argoproj.io/v1alpha1
kind: NotificationsConfiguration
metadata:
  name: default-notifications-configuration
  namespace: openshift-gitops
spec:
  services:
    service.webhook.app-sync-server-post: |
      url: http://nginx.default.svc.cluster.local
      headers:
      - name: testheader
        value: testdata01
    service.webhook.app-sync-body-info: |
      url: http://nginx.default.svc.cluster.local
      headers:
      - name: testheader
        value: testdata01
  templates:
    template.app-sync-server-post-trigger: |
      webhook:
        app-sync-server-post:
          method: POST
          path: /
          body: |
            {
              "id": "{{.app.status.operationState.operation.info}}",
              {{if eq .app.status.operationState.phase "Running"}} "state": "pending"{{end}}
              {{if eq .app.status.operationState.phase "Succeeded"}} "state": "success"{{end}}
              {{if eq .app.status.operationState.phase "Error"}} "state": "error"{{end}}
              {{if eq .app.status.operationState.phase "Failed"}} "state": "error"{{end}},
              "description": "ArgoCD",
              "target_url": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
              "context": "continuous-delivery/{{.app.metadata.name}}",
              "status": "continuous-delivery/{{.app.status}}",
              "metadata": "continuous-delivery/{{.app.metadata}}"
            }
    template.app-sync-body-info-trigger: |
      webhook:
        app-sync-body-info:
          method: POST
          path: /
          body: |
            {
              "app": "{{.app}}",
              "context": "{{.context}}",
              "serviceType": "{{.serviceType}}",
              "recipient": "{{.recipient}}"
            }      
  triggers:
    trigger.on-sync-succeeded: |
      # - when: app.status.sync.status == 'Synced'
      #   send: [app-sync-server-post-trigger, app-sync-body-info-trigger]
      - when: app.status.operationState.phase in ['Succeeded']
        send: [app-sync-server-post-trigger, app-sync-body-info-trigger]
      - when: app.status.operationState.phase in ['Error', 'Failed']
        send: [app-sync-server-post-trigger, app-sync-body-info-trigger]
